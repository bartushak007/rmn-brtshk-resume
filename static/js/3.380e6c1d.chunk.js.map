{"version":3,"sources":["components/blocks/slider/index.js","components/blocks/slider/Slider.js","hooks/useSlider.js","components/sections/portfolio/PortfolioSlider.js"],"names":["Slider","_ref","items","currentSlide","setSlide","sliderLength","slideClassName","i","concat","removeHole","react_default","a","createElement","className","style","transform","map","_ref2","src","key","onClick","shared_image","useSlider","length","delay","arguments","undefined","doSlide","startSlide","_useState","useState","_useState2","Object","slicedToArray","setCurrentSlide","_useState3","_useState4","goRight","setGoRight","useEffect","interval","setInterval","clearInterval","nextSlide","prevSlide","id","PortfolioSlider","portfolio","_useSlider","touchStart","setTouchStart","difference","setDifference","Fragment","onTouchStart","e","changedTouches","clientX","onTouchEnd","blocks_slider","title","rel","href","link","target","steck","elem"],"mappings":"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","file":"static/js/3.380e6c1d.chunk.js","sourcesContent":["import Slider from './Slider';\r\n\r\nexport default Slider;","import React from \"react\";\r\nimport Image from \"../../shared/image\";\r\nimport './style/slider.scss';\r\n\r\nconst Slider = ({ items, currentSlide, setSlide, sliderLength }) => {\r\n  const slideClassName = i =>\r\n    `slider__cell ${currentSlide === i ? \"slider__cell--active\" : \"\"}`;\r\n\r\n  const removeHole =\r\n    currentSlide === sliderLength - 1\r\n      ? sliderLength - 2\r\n      : currentSlide === 0\r\n      ? 1\r\n      : currentSlide;\r\n\r\n  const renderSlide = ({src}, i) => {\r\n    const changeSlide = () => setSlide(i);\r\n    return (\r\n      <div key={i} onClick={changeSlide} className={slideClassName(i)}>\r\n        <div className=\"slider__cell-inner\">\r\n          <Image src={src} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"slider\">\r\n      <div\r\n        className={\"slider__area\"}\r\n        style={{\r\n          transform: `translateX(calc(${(-100 / 3) * removeHole - -100 / 3}%))`\r\n        }}\r\n      >\r\n        {items.map(renderSlide)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useSlider = (length, delay = 5000, doSlide = true, startSlide = 0) => {\r\n  const [currentSlide, setCurrentSlide] = useState(startSlide);\r\n  const [goRight, setGoRight] = useState(true);  \r\n\r\n  useEffect(() => {    \r\n    if (doSlide) {\r\n      const interval = setInterval(() => {\r\n        if (goRight) {\r\n          currentSlide < length - 1 && setCurrentSlide(currentSlide + 1);\r\n          if (currentSlide === length - 1) {\r\n            setGoRight(!goRight);\r\n            setCurrentSlide(length - 2);\r\n          }\r\n        } else {\r\n          currentSlide && setCurrentSlide(currentSlide - 1);\r\n          if (currentSlide === 0) {\r\n            setGoRight(!goRight);\r\n            setCurrentSlide(1);\r\n          }\r\n        }\r\n      }, delay);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [currentSlide, length, delay, doSlide, goRight]);\r\n\r\n  const nextSlide = () =>\r\n    currentSlide < length - 1 && setCurrentSlide(currentSlide + 1);\r\n\r\n  const prevSlide = () => currentSlide && setCurrentSlide(currentSlide - 1);\r\n\r\n  const setSlide = id => setCurrentSlide(id);\r\n\r\n  return {\r\n    currentSlide,\r\n    nextSlide,\r\n    prevSlide,\r\n    setSlide,\r\n    sliderLength: length\r\n  };\r\n};\r\n\r\nexport default useSlider;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Slider from \"../../blocks/slider\";\r\nimport useSlider from \"../../../hooks/useSlider\";\r\n\r\nconst PortfolioSlider = ({ portfolio }) => {\r\n  const {\r\n    currentSlide,\r\n    nextSlide,\r\n    prevSlide,\r\n    setSlide,\r\n    sliderLength\r\n  } = useSlider(portfolio.length);\r\n  const [touchStart, setTouchStart] = useState(null);\r\n  const [difference, setDifference] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (difference && difference > 50) {\r\n      nextSlide();\r\n    } else if (difference && difference < -50) {\r\n      prevSlide();\r\n    }\r\n    setDifference(null);\r\n  }, [difference, nextSlide, prevSlide]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"slider__container\"\r\n        onTouchStart={e => setTouchStart(e.changedTouches[0].clientX)}\r\n        onTouchEnd={e =>\r\n          setDifference(touchStart - e.changedTouches[0].clientX)\r\n        }\r\n      >\r\n        <Slider\r\n          {...{\r\n            currentSlide,\r\n            nextSlide,\r\n            prevSlide,\r\n            setSlide,\r\n            sliderLength,\r\n            items: portfolio\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"portfolio__button-contaioner\">\r\n        <button className=\"portfolio__button\" onClick={prevSlide}>\r\n          prev\r\n        </button>\r\n        <button className=\"portfolio__button\" onClick={nextSlide}>\r\n          next\r\n        </button>\r\n      </div>\r\n      <div className=\"portfolio__description\">\r\n        <h3 className=\"title title--small\">{portfolio[currentSlide].title}</h3>\r\n        <a\r\n          className=\"portfolio__link\"\r\n          rel=\"noopener noreferrer\"\r\n          href={portfolio[currentSlide].link}\r\n          target=\"_blank\"\r\n        >\r\n          Link to gh-pages\r\n        </a>\r\n        <div>\r\n          {portfolio[currentSlide].steck.map((elem, i) => (\r\n            <span className=\"portfolio__skill\" key={i}>\r\n              {elem}\r\n            </span>\r\n          ))}\r\n          <br />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PortfolioSlider;\r\n"],"sourceRoot":""}