{"version":3,"sources":["components/blocks/slider/index.js","components/blocks/slider/Slider.js","hooks/useSlider.js","components/sections/portfolio/PortfolioSlider.js"],"names":["Slider","_ref","items","currentSlide","setSlide","sliderLength","slideClassName","i","concat","removeHole","react_default","a","createElement","className","style","transform","map","_ref2","src","key","onClick","shared_image","useSlider","length","delay","arguments","undefined","doSlide","startSlide","_useState","useState","_useState2","Object","slicedToArray","setCurrentSlide","_useState3","_useState4","goRight","setGoRight","useEffect","interval","setInterval","clearInterval","nextSlide","prevSlide","id","PortfolioSlider","portfolio","_useSlider","touchStart","setTouchStart","difference","setDifference","Fragment","onTouchStart","e","changedTouches","clientX","onTouchEnd","blocks_slider","title","rel","href","link","linkToCSB","target","linkToCSBRepo","stack","elem"],"mappings":"uJAEeA,SCEA,SAAAC,GAAqD,IAAlDC,EAAkDD,EAAlDC,MAAOC,EAA2CF,EAA3CE,aAAcC,EAA6BH,EAA7BG,SAAUC,EAAmBJ,EAAnBI,aACzCC,EAAiB,SAAAC,GAAC,sBAAAC,OACNL,IAAiBI,EAAI,uBAAyB,KAE1DE,EACJN,IAAiBE,EAAe,EAC5BA,EAAe,EACE,IAAjBF,EACA,EACAA,EAaN,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OACEC,UAAW,eACXC,MAAO,CACLC,UAAS,mBAAAP,QAAuB,IAAM,EAAKC,IAAc,IAAM,EAAtD,SAGVP,EAAMc,IAnBO,SAAAC,EAAQV,GAAM,IAAZW,EAAYD,EAAZC,IAEpB,OACER,EAAAC,EAAAC,cAAA,OAAKO,IAAKZ,EAAGa,QAFK,kBAAMhB,EAASG,IAEEM,UAAWP,EAAeC,IAC3DG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOH,IAAKA,YCwBPI,EA1CG,SAACC,GAAyD,IAAjDC,EAAiDC,UAAAF,OAAA,QAAAG,IAAAD,UAAA,GAAAA,UAAA,GAAzC,IAAME,IAAmCF,UAAAF,OAAA,QAAAG,IAAAD,UAAA,KAAAA,UAAA,GAAnBG,EAAmBH,UAAAF,OAAA,QAAAG,IAAAD,UAAA,GAAAA,UAAA,GAAN,EAAMI,EAClCC,mBAASF,GADyBG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnE1B,EADmE4B,EAAA,GACrDG,EADqDH,EAAA,GAAAI,EAE5CL,oBAAS,GAFmCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEnEE,EAFmED,EAAA,GAE1DE,EAF0DF,EAAA,GAI1EG,oBAAU,WACR,GAAIZ,EAAS,CACX,IAAMa,EAAWC,YAAY,WACvBJ,GACFlC,EAAeoB,EAAS,GAAKW,EAAgB/B,EAAe,GACxDA,IAAiBoB,EAAS,IAC5Be,GAAYD,GACZH,EAAgBX,EAAS,MAG3BpB,GAAgB+B,EAAgB/B,EAAe,GAC1B,IAAjBA,IACFmC,GAAYD,GACZH,EAAgB,MAGnBV,GAEH,OAAO,kBAAMkB,cAAcF,MAE5B,CAACrC,EAAcoB,EAAQC,EAAOG,EAASU,IAS1C,MAAO,CACLlC,eACAwC,UATgB,kBAChBxC,EAAeoB,EAAS,GAAKW,EAAgB/B,EAAe,IAS5DyC,UAPgB,kBAAMzC,GAAgB+B,EAAgB/B,EAAe,IAQrEC,SANe,SAAAyC,GAAE,OAAIX,EAAgBW,IAOrCxC,aAAckB,ICkDHuB,UArFS,SAAA7C,GAAmB,IAAhB8C,EAAgB9C,EAAhB8C,UAAgBC,EAOrC1B,EAAUyB,EAAUxB,QALtBpB,EAFuC6C,EAEvC7C,aACAwC,EAHuCK,EAGvCL,UACAC,EAJuCI,EAIvCJ,UACAxC,EALuC4C,EAKvC5C,SACAC,EANuC2C,EAMvC3C,aANuCwB,EAQLC,mBAAS,MARJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAQlCoB,EARkClB,EAAA,GAQtBmB,EARsBnB,EAAA,GAAAI,EASLL,mBAAS,MATJM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GASlCgB,EATkCf,EAAA,GAStBgB,EATsBhB,EAAA,GAoBzC,OATAG,oBAAU,WACJY,GAAcA,EAAa,GAC7BR,IACSQ,GAAcA,GAAc,IACrCP,IAEFQ,EAAc,OACb,CAACD,EAAYR,EAAWC,IAGzBlC,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACE3C,EAAAC,EAAAC,cAAA,OACEC,UAAU,oBACVyC,aAAc,SAAAC,GAAC,OAAIL,EAAcK,EAAEC,eAAe,GAAGC,UACrDC,WAAY,SAAAH,GAAC,OACXH,EAAcH,EAAaM,EAAEC,eAAe,GAAGC,WAGjD/C,EAAAC,EAAAC,cAAC+C,EACK,CACFxD,eACAwC,YACAC,YACAxC,WACAC,eACAH,MAAO6C,KAIbrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBO,QAASwB,GAA/C,QAGAlC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBO,QAASuB,GAA/C,SAIFjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBkC,EAAU5C,GAAcyD,OAC5DlD,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgD,IAAI,sBACJC,KACEf,EAAU5C,GAAc4D,MAAQhB,EAAU5C,GAAc6D,UAE1DC,OAAO,UAENlB,EAAU5C,GAAc4D,MAAQ,mBAChChB,EAAU5C,GAAc6D,WAAa,gBAGvCjB,EAAU5C,GAAc+D,eACvBxD,EAAAC,EAAAC,cAAA,KACEC,UAAU,kBACVgD,IAAI,sBACJC,KAAMf,EAAU5C,GAAc+D,cAC9BD,OAAO,UAJT,qBASFvD,EAAAC,EAAAC,cAAA,WACGmC,EAAU5C,GAAcgE,MAAMnD,IAAI,SAACoD,EAAM7D,GAAP,OACjCG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBM,IAAKZ,GACrC6D,KAGL1D,EAAAC,EAAAC,cAAA","file":"static/js/3.58d24c7a.chunk.js","sourcesContent":["import Slider from './Slider';\n\nexport default Slider;","import React from \"react\";\nimport Image from \"../../shared/image\";\nimport './style/slider.scss';\n\nconst Slider = ({ items, currentSlide, setSlide, sliderLength }) => {\n  const slideClassName = i =>\n    `slider__cell ${currentSlide === i ? \"slider__cell--active\" : \"\"}`;\n\n  const removeHole =\n    currentSlide === sliderLength - 1\n      ? sliderLength - 2\n      : currentSlide === 0\n      ? 1\n      : currentSlide;\n\n  const renderSlide = ({src}, i) => {\n    const changeSlide = () => setSlide(i);\n    return (\n      <div key={i} onClick={changeSlide} className={slideClassName(i)}>\n        <div className=\"slider__cell-inner\">\n          <Image src={src} />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"slider\">\n      <div\n        className={\"slider__area\"}\n        style={{\n          transform: `translateX(calc(${(-100 / 3) * removeHole - -100 / 3}%))`\n        }}\n      >\n        {items.map(renderSlide)}\n      </div>\n    </div>\n  );\n};\n\nexport default Slider;\n","import { useState, useEffect } from \"react\";\n\nconst useSlider = (length, delay = 5000, doSlide = true, startSlide = 0) => {\n  const [currentSlide, setCurrentSlide] = useState(startSlide);\n  const [goRight, setGoRight] = useState(true);  \n\n  useEffect(() => {    \n    if (doSlide) {\n      const interval = setInterval(() => {\n        if (goRight) {\n          currentSlide < length - 1 && setCurrentSlide(currentSlide + 1);\n          if (currentSlide === length - 1) {\n            setGoRight(!goRight);\n            setCurrentSlide(length - 2);\n          }\n        } else {\n          currentSlide && setCurrentSlide(currentSlide - 1);\n          if (currentSlide === 0) {\n            setGoRight(!goRight);\n            setCurrentSlide(1);\n          }\n        }\n      }, delay);\n\n      return () => clearInterval(interval);\n    }\n  }, [currentSlide, length, delay, doSlide, goRight]);\n\n  const nextSlide = () =>\n    currentSlide < length - 1 && setCurrentSlide(currentSlide + 1);\n\n  const prevSlide = () => currentSlide && setCurrentSlide(currentSlide - 1);\n\n  const setSlide = id => setCurrentSlide(id);\n\n  return {\n    currentSlide,\n    nextSlide,\n    prevSlide,\n    setSlide,\n    sliderLength: length\n  };\n};\n\nexport default useSlider;\n","import React, { useState, useEffect } from 'react';\n\nimport Slider from '../../blocks/slider';\nimport useSlider from '../../../hooks/useSlider';\n\nconst PortfolioSlider = ({ portfolio }) => {\n  const {\n    currentSlide,\n    nextSlide,\n    prevSlide,\n    setSlide,\n    sliderLength\n  } = useSlider(portfolio.length);\n  const [touchStart, setTouchStart] = useState(null);\n  const [difference, setDifference] = useState(null);\n\n  useEffect(() => {\n    if (difference && difference > 50) {\n      nextSlide();\n    } else if (difference && difference < -50) {\n      prevSlide();\n    }\n    setDifference(null);\n  }, [difference, nextSlide, prevSlide]);\n\n  return (\n    <>\n      <div\n        className=\"slider__container\"\n        onTouchStart={e => setTouchStart(e.changedTouches[0].clientX)}\n        onTouchEnd={e =>\n          setDifference(touchStart - e.changedTouches[0].clientX)\n        }\n      >\n        <Slider\n          {...{\n            currentSlide,\n            nextSlide,\n            prevSlide,\n            setSlide,\n            sliderLength,\n            items: portfolio\n          }}\n        />\n      </div>\n      <div className=\"portfolio__button-contaioner\">\n        <button className=\"portfolio__button\" onClick={prevSlide}>\n          prev\n        </button>\n        <button className=\"portfolio__button\" onClick={nextSlide}>\n          next\n        </button>\n      </div>\n      <div className=\"portfolio__description\">\n        <h3 className=\"title title--small\">{portfolio[currentSlide].title}</h3>\n        <a\n          className=\"portfolio__link\"\n          rel=\"noopener noreferrer\"\n          href={\n            portfolio[currentSlide].link || portfolio[currentSlide].linkToCSB\n          }\n          target=\"_blank\"\n        >\n          {portfolio[currentSlide].link && 'Link to gh-pages'}\n          {portfolio[currentSlide].linkToCSB && 'Codesandboxe'}\n        </a>\n\n        {portfolio[currentSlide].linkToCSBRepo && (\n          <a\n            className=\"portfolio__link\"\n            rel=\"noopener noreferrer\"\n            href={portfolio[currentSlide].linkToCSBRepo}\n            target=\"_blank\"\n          >\n            Codesandbox. repo\n          </a>\n        )}\n        <div>\n          {portfolio[currentSlide].stack.map((elem, i) => (\n            <span className=\"portfolio__skill\" key={i}>\n              {elem}\n            </span>\n          ))}\n          <br />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PortfolioSlider;\n"],"sourceRoot":""}